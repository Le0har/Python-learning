import telebot
from config import token, channel_id, bot_chat_id
import site_parser
import site_parser_2
import os
import pickle
import asyncio
import time

bot = telebot.TeleBot(token)

def keyboardMain():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    button_push = telebot.types.InlineKeyboardButton(text='‚ñ∂Ô∏è  –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ —Å—Ç–∞—Ç–µ–π  ‚û°Ô∏è', callback_data='push') 
    button_stop = telebot.types.InlineKeyboardButton(text='‚èπ  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞                                           ‚û°Ô∏è', callback_data='stop')
    keyboard.add(button_push, button_stop)
    return keyboard

def getArticle(index, delta_number):
    bot.send_message(channel_id, '‚¨áÔ∏è  –í–Ω–∏–º–∞–Ω–∏–µ, üçã –Ω–æ–≤–∞—è —Å—Ç–∞—Ç—å—è!  ‚¨áÔ∏è')
    articles_name = site_parser.extractArticlesName(delta_number)
    bot.send_message(channel_id, f'–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:\n<b>{articles_name[index][0]}</b>', parse_mode='html')
    articles_whole_text = site_parser.extractArticleWholeText(delta_number)     #–∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∏–∑ –±–∞–∑—ã
    size_article = len(articles_whole_text[index][0])
    if size_article > 4000:       #–ø–µ—á–∞—Ç–∞–µ–º index —Å—Ç–∞—Ç—å—é –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –µ—Å–ª–∏ –æ–Ω–∞ –æ–≥—Ä–æ–º–Ω–∞—è
        stop_symbol_dict = {}
        for paragraph in articles_whole_text[index]:        
            for i in range(len(paragraph) - 1):             #–∏—â–µ–º –∏–Ω–¥–µ–∫—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–±–∞–∑–∞—Ü–µ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å
                if paragraph[i] == '\n' and paragraph[i+1] == '\n':
                    stop_symbol_dict[i] = 'paragraph'       #–ø–æ–º–µ—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ
            for i in range(len(paragraph) - 2):             #–∏—â–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å       
                if paragraph[i] == '$' and paragraph[i+1] == '#' and paragraph[i+2] == '$':
                    stop_symbol_dict[i] = 'picture'         #–ø–æ–º–µ—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫—É
            stop_symbol_dict = dict(sorted(stop_symbol_dict.items()))       #–æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ –∫–ª—é—á–∞–º
            #print(stop_symbol_dict)
            start_paragraph = 0
            summa_one_step = 0
            back_key = 0
            for key in stop_symbol_dict:               #–ø–µ—á–∞—Ç–∞–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ—Å—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–ª—Å—è –∞–±–∑–∞—Ü–µ–º, –∞ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–ª—Å—è –Ω–∞ –ø–æ–ª—É—Å–ª–æ–≤–µ
                if stop_symbol_dict[key] == 'paragraph':    #–µ—Å–ª–∏ —ç—Ç–æ –∞–±–∑–∞—Ü
                    summa_one_step = key - start_paragraph
                    if summa_one_step < 4000:
                        back_key = key
                        continue
                    else:
                        bot.send_message(channel_id, paragraph[start_paragraph:back_key])     #–ø–µ—á–∞—Ç–∞–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ–π –ø–æ—Å—Ç
                        time.sleep(5)
                        start_paragraph = key + 2
                        summa_one_step = 0
                else:  #–∏–Ω–∞—á–µ —ç—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞
                    if back_key != 0 and start_paragraph < key:                 #–µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –ø–µ—Ä–≤—ã–π –∏ –Ω–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Å—Ç
                        if key - start_paragraph > 4000:
                            bot.send_message(channel_id, paragraph[start_paragraph:back_key])     #–ø–µ—á–∞—Ç–∞–µ–º –±–æ–ª—å—à–æ–π –ø–æ—Å—Ç
                            start_paragraph = back_key + 2
                        bot.send_message(channel_id, paragraph[start_paragraph:key])     #–ø–µ—á–∞—Ç–∞–µ–º –ø–æ—Å—Ç –¥–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏
                        time.sleep(5)
                    picture_number = int(paragraph[key + 3]) * 10 + int(paragraph[key + 4])     #—É–∑–Ω–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏
                    getOnePicture(picture_number)
                    start_paragraph = key + 7
            #–ø–µ—á–∞—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç:
            if len(paragraph[start_paragraph:]) > 2:        #–¥–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–º–≤–æ–ª–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏
                bot.send_message(channel_id, paragraph[start_paragraph:])
    else:   #–∏–Ω–∞—á–µ —Å—Ç–∞—Ç—å—è –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω –ø–æ—Å—Ç, –Ω–æ –≤ –Ω–µ–π –º–æ–≥—É –±—É—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏
        stop_symbol_dict = {}
        for paragraph in articles_whole_text[index]:        
            for i in range(len(paragraph) - 2):             #–∏—â–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å       
                if paragraph[i] == '$' and paragraph[i+1] == '#' and paragraph[i+2] == '$':
                    stop_symbol_dict[i] = 'picture'         #–ø–æ–º–µ—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫—É
        if len(stop_symbol_dict) == 0:                      #–µ—Å–ª–∏ –Ω–µ—Ç—É –∫–∞—Ä—Ç–∏–Ω–æ–∫, —Ç–æ –ø–µ—á–∞—Ç–µ–º —Ü–µ–ª–∏–∫–æ–º
            bot.send_message(channel_id, articles_whole_text[index][0])
        else:       #–∏–Ω–∞—á–µ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏
            stop_symbol_dict = dict(sorted(stop_symbol_dict.items()))       #–æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ –∫–ª—é—á–∞–º
            start_paragraph = 0
            for key in stop_symbol_dict:
                if key != 0 and start_paragraph < key:                 #–µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –ø–µ—Ä–≤—ã–π –∏ –Ω–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Å—Ç
                        bot.send_message(channel_id, paragraph[start_paragraph:key])     #–ø–µ—á–∞—Ç–∞–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ–π –ø–æ—Å—Ç
                        time.sleep(5)
                picture_number = int(paragraph[key + 3]) * 10 + int(paragraph[key + 4])     #—É–∑–Ω–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏
                getOnePicture(picture_number)
                start_paragraph = key + 7
            #–ø–µ—á–∞—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç:    
            if len(paragraph[start_paragraph:]) > 2:        #–¥–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–º–≤–æ–ª–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏
                bot.send_message(channel_id, paragraph[start_paragraph:])

def getPictures(index, delta_number):
    pictures = site_parser.extractArticlePictures(delta_number)
    picture = pictures[index]
    if picture[0] != None:
        list_binary = pickle.loads(picture[0])
        count_pict = 1
        for i in range(len(list_binary)):           #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å—Ç–∞—Ç—å–∏ –≤ –ø–∞–ø–∫—É
            if not os.path.isdir('media_out'):
                os.mkdir('media_out')
            with open(f'media_out/picture_for_post_{count_pict}.jpg', 'wb') as file:
                file.write(list_binary[i])
            count_pict += 1

def getOnePicture(picture_number):
    with open(f'media_out/picture_for_post_{picture_number}.jpg', 'rb') as file:
        media_file = file.read()
    bot.send_photo(channel_id, media_file)
    time.sleep(5)                   #–ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º —Ñ–æ—Ç–æ–∫ –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∞—é Error code: 429. Description: Too Many Requests: retry after 40

def pushArticles(chat_id):
    bot.send_message(chat_id, '–ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π   üöÄ')
    old_number = site_parser.getNumberRecordsDb()
    site_parser.main()
    site_parser_2.main()
    new_number = site_parser.getNumberRecordsDb()
    delta_number = new_number[0] - old_number[0]
    if delta_number > 0:
        bot.send_message(chat_id, '–ï—Å—Ç—å –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏!')
        for index in range(delta_number):
            getPictures(index, delta_number)
            getArticle(index, delta_number)
            time.sleep(50)                  #–ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–µ–π –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∞—é Error code: 429. Description: Too Many Requests: retry after 40
        bot.send_message(chat_id, '–í—Å–µ —Å—Ç–∞—Ç—å–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã!')
    else:
        bot.send_message(chat_id, '–ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π —É–≤—ã –ø–æ–∫–∞ –Ω–µ—Ç—É!')

""" @bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!  ‚¨áÔ∏è  –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ  ‚¨áÔ∏è', reply_markup=keyboardMain())

@bot.message_handler(content_types=['text'])
def testAnswer(message):
    bot.send_message(message.chat.id, '‚ÑπÔ∏è  –Ø —É–º–µ—é —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç—å–∏ –Ω–∞ –∫–∞–Ω–∞–ª:  <b>In search of articles</b>', reply_markup=keyboardMain(), parse_mode='html') 

@bot.callback_query_handler(func=lambda callback: True)
def callbackMessage(callback):
    if callback.data == 'push':
        pushArticles(callback.message.chat.id)
        
    if callback.data == 'stop':
        bot.send_message(callback.message.chat.id, 'üõë  –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
        bot.stop_polling()    """

async def newArticlesEveryMinute():
    while True:
        pushArticles(bot_chat_id) 
        await asyncio.sleep(600)                #–ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç


if __name__ == '__main__':
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        asyncio.run(newArticlesEveryMinute())
    except KeyboardInterrupt:                   #–ø—Ä–æ–ø—É—Å–∫–∞—é –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à Ctrl+C –≤ –∫–æ–Ω—Å–æ–ª–µ
        pass
    bot.polling(non_stop=True) 